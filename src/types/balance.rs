use std::ops::Deref;

use bdk_wallet::Balance as BdkBalance;
use serde::Serialize;
use wasm_bindgen::prelude::wasm_bindgen;

/// Balance, differentiated into various categories.
#[wasm_bindgen]
#[derive(Debug, Serialize)]
pub struct Balance {
    balance: BdkBalance,
}

#[wasm_bindgen]
impl Balance {
    /// All coinbase outputs not yet matured
    #[wasm_bindgen(getter)]
    pub fn immature(&self) -> u64 {
        self.balance.immature.to_sat()
    }

    /// Unconfirmed UTXOs generated by a wallet tx
    #[wasm_bindgen(getter)]
    pub fn trusted_pending(&self) -> u64 {
        self.balance.trusted_pending.to_sat()
    }

    /// Unconfirmed UTXOs received from an external wallet
    #[wasm_bindgen(getter)]
    pub fn untrusted_pending(&self) -> u64 {
        self.balance.untrusted_pending.to_sat()
    }

    /// Confirmed and immediately spendable balance
    #[wasm_bindgen(getter)]
    pub fn confirmed(&self) -> u64 {
        self.balance.confirmed.to_sat()
    }

    /// Get sum of trusted_pending and confirmed coins.
    ///
    /// This is the balance you can spend right now that shouldn't get cancelled via another party
    /// double spending it.
    #[wasm_bindgen(getter)]
    pub fn trusted_spendable(&self) -> u64 {
        self.balance.trusted_spendable().to_sat()
    }

    /// Get the whole balance visible to the wallet.
    #[wasm_bindgen(getter)]
    pub fn total(&self) -> u64 {
        self.balance.total().to_sat()
    }
}

impl Deref for Balance {
    type Target = BdkBalance;

    fn deref(&self) -> &Self::Target {
        &self.balance
    }
}

impl From<BdkBalance> for Balance {
    fn from(balance: BdkBalance) -> Self {
        Balance { balance }
    }
}
